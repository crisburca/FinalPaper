---
title: "Decoding Victory in League of Legends: A Comparative Study of Early Game Statistics"
author: "Cristina Burca"
thanks: "Code and data are available at: LINK."
date: today
date-format: long
abstract: "Esports, particularly League of Legends, have seen exponential growth, transforming into a professional sporting phenomenon with international tournaments and a vast player base. This paper delves into the statistical analysis of League of Legends Worlds Championship data from 2018-2023, focusing on early game variables gold, expereicne and creep score and their impact on the win probability. Our results indicate that while generally higher statistics compared to the opposing team enhance the likelihood of victory, some early in-game variables present suggesst otherwise."
format: 
  pdf:
    documentclass: article
    geometry: margin = 1in
number-sections: true
toc: true
bibliography: references.bib
---

```{r}
#| include: false
#| warning: false
#| message: false

library(tinytex)
library(readr)
library(tidyverse)
library(dplyr)
library(tibble)
library(rstanarm)
library(modelsummary)
library(purrr)
library(kableExtra)
library(gridExtra)
library(grid)
library(tidyr)
library(reshape2)
library(here)

data_2018 <- read.csv(here("inputs", "data", "2018_LoL_esports_match_data_from_OraclesElixir.csv"))
data_2019 <- read.csv(here("inputs", "data", "2019_LoL_esports_match_data_from_OraclesElixir.csv"))
data_2020 <- read.csv(here("inputs", "data", "2020_LoL_esports_match_data_from_OraclesElixir.csv"))
data_2021 <- read.csv(here("inputs", "data", "2021_LoL_esports_match_data_from_OraclesElixir.csv"))
data_2022 <- read.csv(here("inputs", "data", "2022_LoL_esports_match_data_from_OraclesElixir.csv"))
data_2023 <- read.csv(here("inputs", "data", "2023_LoL_esports_match_data_from_OraclesElixir.csv"))

lol_data <- rbind(data_2018, data_2019, data_2020, data_2021, data_2022, data_2023)
```


```{r}
#| include: false
#| warning: false
#| message: false

model_data <- lol_data %>% filter(league == "WLDs", position == "team", side == "Blue") %>%
  select(league, year, side, teamname, result, goldat10, xpat10, csat10, goldat15, xpat15, csat15, golddiffat10, xpdiffat10, csdiffat10, golddiffat15, xpdiffat15, csdiffat15) %>%
  na.omit()

```


# Motivation

Esports (short for electronic gaming) as professional sporting tournaments have grown exponentially in popularity, due to the rise of multiplayer games such as Valorant, Counter-Strike: Global Offensive, Tom Clancy’s Rainbow Six Siege, and the focus of this paper, League of Legends. Developed by Riot Games in 2009, League of Legends is a competitive multiplayer online battle arena (MOBA) with an active player base of over 150,000 million as of 2022. It has grown to be the largest esport in the world – with some events having higher viewership than NBA and Stanley Cup championships – and consequently promoted popularity of the esport industry. International tournaments are held every year, with leagues and teams established around the world. This paper will be focusing on statistics from the League of Legends World Championship hosted by the developers, Riot Games. Commonly known as Worlds, it is a championship tournament hosted annually, involving 24 teams from all around the world. 

There are many factors to be aware of when in a multiplayer team-based game, with some factors that are invariable, and others that are completely up to chance. However, the games are also greatly influenced by strategy – with decisions made prior to and during the first stages of the match that can impact the outcome of the game. Games typically last between 30-60 minutes, but can range much shorter or longer. Arguably, the early stages of the game (referred to as “early game”) can influence the game’s outcome the most. As the game goes on, the increase of players’ gold income, creep score, and experience levels when compared to their opponents influence the end result. These variables and their importance will be further discussed in the next section. We will be examining the variables in the early stages of the game, specifically during the 10 and 15 minute marks, to understand their significance in winning a game. We also compare them with older data as well as data from 2023, to see the difference in variables. 

These variables of interest are tested through a logistic regression model. The findings show that.. 

In section 1.1 of the paper, a brief introduction to the game is defined, as well as an introduction to the variables in the game and their correlations. In section 2, the data set is and the variables of interest are discussed and observed. Section 3 will establish the logistic model, its justification, and how it was created. Section 4 discusses the results. 

## Introduction to the Game

In the game, there are two teams of five players each, competing within a square-shaped map. They begin on opposing corners, of which each half is referred to as either the red or the blue side. Both sides have a single “nexus,” and the game is ended when one of the nexuses is destroyed. The objective for each team is to reach the other end of the map, and destroy the other team’s nexus in order to win. Each player controls a character, or “champion,” of their choice, from an available pool of 160+ unique options with distinct abilities and playstyles. During a match, players can advance towards the enemy’s base through three lanes, two of which go around the perimeter of the map, and one that cuts diagonally across. These lanes are called “top,” “mid(/middle),” and “bot(/bottom),” of which both teams have designated players to occupy the lanes. Each player is assigned a unique “role” in the game, four of which are allocated to advancing within a lane: top and mid lane are “solo” lanes, with a single player contending against the opposing laner, whereas bot lane is occupied by two players (an “adc” and a “support”). In each lane on both sides of the map, there are two “turrets” that must be destroyed in order to advance towards the enemy “base,” where the nexus is located. Both red and blue sides spawn waves of minions, or “creeps,” every 30 seconds - consisting of six or seven creeps that advance down each lane. The allied creeps contribute to destroying the opposing turrets, and will grant enemy players gold if killed. In each lane, players will defend their turrets by defeating creeps and engaging with enemy laners, in order to push towards and destroy the opposing turrets. Players earn gold and experience through killing creeps, defeating or assisting in the defeat of enemy champions, and destroying turrets. Each player will passively earn gold, but capturing objectives for greater income and experience can be used to purchase items and level up abilities faster - consequently making one’s champion more powerful, and more efficient in combat. Killing creeps is the main source of gold for players within the lanes. The fifth player that is not assigned to a lane is the designated “jungler,” of which passes through the “jungle” in between the lanes and kills neutral jungle monsters in order to get gold and experience. The jungler’s role is to assist in defeating enemy laners, and secure neutral objectives that can offer team-wide buffs and gold. By acquiring more gold and experience than the enemy team through creeps, objectives, and kill/assist count, a team is more effective in resisting against the other and pushing towards the enemy’s nexus in order to win the game.


• Gold is earned through killing creeps (amount killed is creep score), killing or assisting in killing opponents, and completing objectives. When a champion accumulates consistent kills without dying, the champion will receive a bounty that the opposing team gets when killing the champion. Gold is then used to purchase utility items specific to champions to become stronger. 
• Experience is earned in the same way, but is counted as levels from 1-18, where each level, the champion is able to upgrade one of their four abilities. Experience is also gained through standing near minions that are being killed. 
• since creep score is the main source of gold, especially in the first 15 minutes of the game, players’ individual creep score can signify roughly how much income the player has, and how well they are doing against their opposing laner. 
Although all of these variables correlate, they are not necessarily dependent on each other, and they do not grow together. 

# Data

The data is sourced from OracleElixir (cite), containing information on players and tournaments played in the World Series from years 2108 to 2023 with gaming statistics for each match.

The analysis of the data is done using R and packages ... , and plots, graphs and tables were created using ...


## Overview of data

Each team and individual player have over 100 variables recorded for each match. To get an idea of the data set, we give an example of a matched played by the finalist teams Weibo Gaming and T1 in the Worlds Championship in 2023 in In @tbl-headdata1, listing the variables we are interested in. 
```{r}
#| echo: false
#| warning: false
#| message: false
#| label: tbl-headdata1
#| tbl-cap: "Finalist team's total gold, experience and creep score in 2023 at 10 and 15 minutes"

overview <- lol_data %>% 
  select(year, game, league, teamname, side, position,
         result, goldat10, xpat10, csat10, goldat15, xpat15, csat15) %>%
  filter(year == 2023, league == "WLDs",
         (teamname == "T1"| teamname == "Weibo Gaming"),
         (goldat10 == 16638 | goldat10 == 15536),
         position == "team") %>%
  na.omit()

overview_new <- overview[, c("teamname", "result",
                             "goldat10","xpat10","csat10","goldat15","xpat15", "csat15")]

kable(overview_new, col.names = c("teamname", "result", "Gold at 10", "XP at 10", "CS at 10", "Gold at 15", "XP at 15", "CS at 15"), digits = 2)
```
All matches are displayed as in @tbl-headdata1. We are not necessarily testing the importance of the exact values in this paper, thus we draw our focus to the differences in each variable for each team. Instead of calculating a specific score that needs to be met, which varies greatly from game to game, we focus on the difference between each team statistic, to instead calculate a value as to which the winning team is ahead by. 

In @tbl-headdata2, we look at the same match as @tbl-headdata1, but instead the team's total difference in gold, experience, and creep score. 
```{r}
#| echo: false
#| warning: false
#| message: false
#| label: tbl-headdata2
#| tbl-cap: "Finalist team's total difference in gold, experience and creep score in 2023 at 10 and 15 minutes"

overview2 <- lol_data %>% 
  select(year, game, league, teamname, side, position,
         result, golddiffat10, xpdiffat10, csdiffat10,
         golddiffat15, xpdiffat15, csdiffat15) %>%
  filter(year == 2023, league == "WLDs",
         (teamname == "T1"| teamname == "Weibo Gaming"),
         (golddiffat10 == 1102 | golddiffat10 == -1102),
         position == "team") %>%
  na.omit()

overview_new2 <- overview2[, c("teamname", "result",
                             "golddiffat10","xpdiffat10","csdiffat10","golddiffat15","xpdiffat15", "csdiffat15")]

kable(overview_new2, col.names = c("teamname", "result", "Gold at 10", "XP at 10", "CS at 10", "Gold at 15", "XP at 15", "CS at 15"), digits = 2)
```
We expect the values to be equal in value and opposite in sign. To avoid duplicates (and eventually have the values cancel each other out), we take into consideration that each game contains a team on each side of the map, either the red or blue. For the sake of this paper, we choose to observe all the games from the blue side of the map. It is safe to assume that both the red and the blue side have a 50% of winning the game. 

Analyzing all matches from the League of Legends World Championship from 2018-2023, we introduce the variables: 'golddiffat10', 'xpdiffat10', 'golddiffat15', 'xpdiffat15', and 'csdiffat15'. Each variable calculates the cumulative difference in either gold, experience or creep score between the two teams at 10 or 15 minutes into the game.

In @tbl-headdata3, we introduce the averages of differences in gold, experience and creep score at 10 and 15 minutes between teams over the years. 
```{r}
#| echo: false
#| warning: false
#| message: false
#| label: tbl-headdata3
#| tbl-cap: "Average difference in Gold, Experience and Creep Score at 10 and 15 minutes by Year"


diff_averages <- model_data %>%
  filter(result == 1) %>%
  group_by(year) %>%
  summarise(
    avg_golddiffat10 = mean(golddiffat10, na.rm = TRUE),
    avg_xpdiffat10 = mean(xpdiffat10, na.rm = TRUE),
    avg_csdiffat10 = mean(csdiffat10, na.rm = TRUE),
    avg_golddiffat15 = mean(golddiffat15, na.rm = TRUE),
    avg_xpdiffat15 = mean(xpdiffat15, na.rm = TRUE),
    avg_csdiffat15 = mean(csdiffat15, na.rm = TRUE))

kable(diff_averages, col.names = c("Year", "Gold at 10", "XP at 10", "CS at 10", "Gold at 15", "XP at 15", "CS at 15"), digits = 2)

```

 
```{r, fig.width=7}
#| echo: false
#| warning: false
#| message: false
#| label: fig-headdata1
#| fig-cap: "Plot of average difference in Gold, Experience and Creep Score at 10 and 15 minutes by Year"


long_data <- diff_averages %>%
  pivot_longer(cols = starts_with("avg"),
               names_to = "variable",
               values_to = "value")


long_data <- long_data %>%
  mutate(metric = case_when(
    str_detect(variable, "golddiff") ~ "Gold Difference",
    str_detect(variable, "xpdiff") ~ "Experience Difference",
    str_detect(variable, "csdiff") ~ "Creep Score Difference"
  ))


selected_vars <- long_data %>%
  filter(str_detect(variable, "golddiff") | str_detect(variable, "xpdiff") | str_detect(variable, "csdiff"))

ggplot(selected_vars, aes(x = year, y = value, color = variable)) +
  geom_line() +
  facet_wrap(~ metric, scales = "free_y") +
  labs(color = "Time", y = "Average Difference") +
  theme_minimal() +
  theme(legend.position = "bottom") +
  ylab("Average value per year")

```

We plot these values in @fig-headdata1 for easier observation. We introduce averages of team difference in gold, experience and creep score at 10 and 15 minutes over the years. We notice that although the values themselves fluctuate, the difference between the averages stay approximately uniform. From this, we deduce that between the 10 and 15 mark in the game, on average, the increase in all variables is uniform, but over the years, the actual values of the difference change. Since the game is heavily influenced by the updates that are released by the developers yearly, this can affect play style and strategy in the game, which subsequently affects the how close the games were.

With these ideas in mind, it is hard to base our current predictions on games played in tournaments on older releases of the game. However, for overall analysis, we examine the variables over the years for overall predictions, as well as in the current year for current predictions. 

We look at averages of all variables for winning and losing teams, as well as their difference in @tbl-headdata5, specific to the year 2023.

```{r}
#| echo: false
#| warning: false
#| message: false
#| label: tbl-headdata5
#| tbl-cap: "Difference in Gold, Experience and Creep Score at 10 and 15 minutes in 2023"


averages <- model_data %>%
  filter(year == 2023) %>% 
  group_by(result) %>%
  summarise(
    avg_goldat10 = mean(goldat10, na.rm = TRUE),
    avg_xpat10 = mean(xpat10, na.rm = TRUE),
    avg_csat10 = mean(csat10, na.rm = TRUE),
    avg_goldat15 = mean(goldat15, na.rm = TRUE),
    avg_xpat15 = mean(xpat15, na.rm = TRUE),
    avg_csat15 = mean(csat15, na.rm = TRUE))

difference <- averages[2, ] - averages[1, ]
averages <- rbind(averages, difference)


averages$result <- as.character(averages$result)
averages$result[1] <- "Lost"
averages$result[2] <- "Won"
averages$result[3] <- "Difference"

kable(averages, col.names = c("Result", "Gold at 10", "XP at 10", "CS at 10", "Gold at 15", "XP at 15", "CS at 15"), digits = 2)


```

Notice that the average difference between the winning and losing teams of each variable is much greater at 15 minutes compared to 10 minutes. This suggests that an advance in the first 10 minutes of the game can exponentially raise the winning teams statistics in the subsequent 5 minutes.

It is evident that the winning team has higher statics overall, but we are interested in the importance of these early game variables and their influence in winning the game. To evaluate this, we build a logistic regression model.

One small thing to note is the small bias comparing the red and blue side. In the past, it has been knowing in the community that the blue side is 'advantageous', most likely due to the positioning and the map layout. We show this is true in Worlds Championship matches as well, in @tbl-headdata6, where the average win rate for the blue side is greater than the red side, which win rates 53% and 47% respectively. In @fig-headdata2, we can see that this is a subsequent trend over the years. 

```{r}
#| echo: false
#| warning: false
#| message: false
#| label: tbl-headdata6
#| tbl-cap: "Win percentages by side for all Worlds data from 2018-2023"


win_percentages <- model_data %>%
  group_by(side, result) %>%
  summarise(count = n()) %>%
  mutate(percentage = count / sum(count) * 100)

# Filter for wins only
win_percentages <- win_percentages %>%
  filter(result == 1)

win_percentages <- win_percentages[, c("side", "percentage")]

kable(win_percentages, col.names = c("Side", "Avg. Win rate"), digits = 2)
```

```{r, fig.width= 5, fig.height= 2.5}
#| echo: false
#| warning: false
#| message: false
#| label: fig-headdata2
#| fig-cap: "Win percentages by side for all Worlds data from 2018-2023"

win_percentages_year <-  model_data %>%
  group_by(year, side, result) %>%
  summarise(count = n()) %>%
  mutate(percentage = count / sum(count) * 100)

win_percentages_year <- win_percentages_year %>%
  filter(result == 1)

ggplot(win_percentages_year, aes(x = factor(year), y = percentage, fill = side)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(x = "Year", y = "Win Percentage", fill = "Side") +
  theme_minimal() +
  scale_fill_brewer(palette = "Set1")
```

```{r}
#| include: false
#| warning: false
#| message: false
#| label: fig-headdata6
#| fig-cap: "Average Gold, Experience and Creep Score at 10 and 15 minutes by winning and losing teams by year"
#| fig-subcap: ["Gold at 10 minutes","Gold at 15 minutes", "XP at 10 minutes", "XP at 15 minutes", "CS at 10 minutes", "CS at 15 minutes"]
#| layout-ncol: 2

not_diff <- lol_data %>% 
  filter(league == "WLDs", position == "team") %>%
  select(league, year, side, teamname, result, goldat10, xpat10, csat10, goldat15, xpat15, csat15)

averages_won <- not_diff %>%
  filter(result == 1) %>%
  group_by(year) %>%
  summarise(
    avg_goldat10 = mean(goldat10, na.rm = TRUE),
    avg_xpat10 = mean(xpat10, na.rm = TRUE),
    avg_csat10 = mean(csat10, na.rm = TRUE),
    avg_goldat15 = mean(goldat15, na.rm = TRUE),
    avg_xpat15 = mean(xpat15, na.rm = TRUE),
    avg_csat15 = mean(csat15, na.rm = TRUE)
  )

averages_lost <- not_diff %>%
  filter(result == 0) %>%
  group_by(year) %>%
  summarise(
    avg_goldat10 = mean(goldat10, na.rm = TRUE),
    avg_xpat10 = mean(xpat10, na.rm = TRUE),
    avg_csat10 = mean(csat10, na.rm = TRUE),
    avg_goldat15 = mean(goldat15, na.rm = TRUE),
    avg_xpat15 = mean(xpat15, na.rm = TRUE),
    avg_csat15 = mean(csat15, na.rm = TRUE)
  )

ggplot() +
  geom_line(data = averages_won, aes(x=year, y=avg_goldat10, color="Won")) +
  geom_line(data = averages_lost, aes(x=year, y=avg_goldat10, color="Lost")) +
  labs(color="Legend") +
  ylab("Gold") + 
  xlab("Year")

ggplot() +
  geom_line(data = averages_won, aes(x=year, y=avg_goldat15, color="Won")) +
  geom_line(data = averages_lost, aes(x=year, y=avg_goldat15, color="Lost")) +
  labs(color="Legend") +
  ylab("Gold") + 
  xlab("Year")

ggplot() +
  geom_line(data = averages_won, aes(x=year, y=avg_xpat10, color="Won")) +
  geom_line(data = averages_lost, aes(x=year, y=avg_xpat10, color="Lost")) +
  labs(color="Legend") +
  ylab("XP") + 
  xlab("Year")

ggplot() +
  geom_line(data = averages_won, aes(x=year, y=avg_xpat15, color="Won")) +
  geom_line(data = averages_lost, aes(x=year, y=avg_xpat15, color="Lost")) +
  labs(color="Legend") +
  ylab("XP") + 
  xlab("Year")

ggplot() +
  geom_line(data = averages_won, aes(x=year, y=avg_csat10, color="Won")) +
  geom_line(data = averages_lost, aes(x=year, y=avg_csat10, color="Lost")) +
  labs(color="Legend") +
  ylab("CS") + 
  xlab("Year")

ggplot() +
  geom_line(data = averages_won, aes(x=year, y=avg_csat15, color="Won")) +
  geom_line(data = averages_lost, aes(x=year, y=avg_csat15, color="Lost")) +
  labs(color="Legend") +
  ylab("CS") + 
  xlab("Year")

```

# Model

The goal of this model is simple. We analyze the relation of gold, experience and creep score difference and their correlation to winning a game. We analyze data from 2018 to 2023, as well as specifically 2023, to understand the overall and current correlation. 

## Model Set-up

We take into consideration the blue side of all games, as intuitively there is a 50% chance of winning on each side of the map.
We define the variables in the model @eq-regression. $y_i$ is the probability that the game is won, $\mbox{goldat10}_i$, $\mbox{xpat10}_i$, and $\mbox{csat10}_i$ as the average of gold, experience and creep score at 10 minutes respectively, and $\mbox{goldat15}_i$, $\mbox{xpat15}_i$, and $\mbox{csat15}_i$ as the averages at 15 minutes. We look at difference in variables as opposed to individual team statistics as we are not interested in the actual value of each variable, but rather the importance of each individual variable. 

$$
\begin{aligned} 
y_i|\pi_i  &\sim \mbox{Bern}(\pi_i) \\
\mbox{logit}(\pi_i) &= \beta_0 + \beta_1 \times \mbox{goldat10}_i + \beta_2\times \mbox{xpat10}_i + \beta_3\times \mbox{csat10}_i +\\ \beta_4 \times \mbox{goldat15}_i+ \beta_5 \times \mbox{xpat15}_i+ \beta_6 \times \mbox{csat15}_i\\
\beta_0 &\sim \mbox{Normal}(0, 2.5) \\
\beta_1 &\sim \mbox{Normal}(0, 2.5) \\
\beta_2 &\sim \mbox{Normal}(0, 2.5) \\
\beta_3 &\sim \mbox{Normal}(0, 2.5) \\
\beta_4 &\sim \mbox{Normal}(0, 2.5) \\
\beta_5 &\sim \mbox{Normal}(0, 2.5) \\
\beta_6 &\sim \mbox{Normal}(0, 2.5) 
\end{aligned}
$$ {#eq-regression}


We run this model in @citeR using the 'rstanarm' package @rStanarm. We scale this model since gold, experience and creep score are different 'units; and are not the same scale. We model and plot our findings based on this scale, then we scale back to the original units for insight on the specific values. 

## Model Justification

We expect for all higher values to imply a winning team, but we are interested in which variables are more significant. One might assume that all variables are equally as important, and we will use our model to either prove or disprove this. 

## Model Prediction

Introduce simulation ...  
 

# Results

## Model 1: From years 2018-2023

```{r}
#| include: false
#| warning: false
#| message: false

#set scale
model_data$golddiffat10 <- scale(model_data$golddiffat10)
model_data$xpdiffat10 <- scale(model_data$xpdiffat10)
model_data$csdiffat10 <- scale(model_data$csdiffat10)
model_data$golddiffat15 <- scale(model_data$golddiffat15)
model_data$xpdiffat15 <- scale(model_data$xpdiffat15)
model_data$csdiffat15 <- scale(model_data$csdiffat15)

# filter by side
blue_data <- model_data  %>% filter(side == "Blue")
```


```{r}
#| include: false
#| warning: false
#| message: false

# Calculate means and standard deviations for scaling back later
means <- sapply(model_data[, c("golddiffat10", "xpdiffat10", "csdiffat10", "golddiffat15", "xpdiffat15", "csdiffat15")], mean, na.rm = TRUE)
sds <- sapply(model_data[, c("golddiffat10", "xpdiffat10", "csdiffat10", "golddiffat15", "xpdiffat15", "csdiffat15")], sd, na.rm = TRUE)


#model for blue side
set.seed(853)

blue_summary_data <- 
  blue_data |> 
  slice_sample(n = 1000)

blue_results <-
  stan_glm(
    result ~ golddiffat10 + xpdiffat10 + csdiffat10 + golddiffat15 + xpdiffat15 + csdiffat15,
    data = blue_summary_data,
    family = binomial(link = "logit"),
    prior = normal(location = 0, scale = 2.5, autoscale = TRUE),
    prior_intercept = 
      normal(location = 0, scale = 2.5, autoscale = TRUE),
    seed = 853)

saveRDS(
  blue_results,
  file = "blue_results.rds")

blue_results <-
  readRDS(file = "blue_results.rds")

coef_unscaled <- coef(blue_results)[c("golddiffat10", "xpdiffat10",
                                      "csdiffat10", "golddiffat15",
                                      "xpdiffat15", "csdiffat15")] * sds

```
 
 
```{r, fig.width= 6, fig.height= 3}
#| echo: false
#| warning: false
#| message: false
#| label: fig-headdata3
#| fig-cap: "Logistic regression model of Worlds matches from 2018- 2023 for difference in gold, xp and cs at 10 and 15 minutes relative to win rate"


modelplot(blue_results, conf_level = 0.9) +
  labs(x = "90 per cent credibility interval")
```

Model 1 illustrated in @fig-headdata3 displays the logistic regression model of Worlds matches from 2018- 2023 for average team difference in gold, experience and creep score at 10 and 15 minutes relative to win rate. Since we have scaled the model, we can assume all variables are counted in the same units. Notice that the intercept is not exactly at 0, meaning that there is not a 50% chance base win rate dependent on both sides. This is due to the analysis in Section 2.1, @tbl-headdata6 and @fig-headdata2, where the bias was discussed. Although something to note, it does not skew the results. The model indicates that a negative difference in experience and creep score at 10 minutes is associated with an increased likelihood of winning. The difference in gold at 10 minutes and creep score at 15 minutes suggest a small increase in the likelihood of winning. The difference in experience and especially gold at 15 minutes increase the likelihood of winning . Based on the first 15 minutes of a game, we can utilize this model to predict the outcome of the winning team. 


```{r, fig.height= 5, fig.width= 3}
#| echo: false
#| warning: false
#| message: false
#| label: tbl-headdata7
#| tbl-cap: "Model summary of Model 1"

modelsummary(
  list(
    "Probability of winning " = blue_results
  ),
  gof_omit = ".*"
)

```

@tbl-headdata7 shows the coefficients of the predictor variables in Model 1. The top half of the table provides the values of the coefficient representing the intercept, and the other coefficients represent the average difference of the winning team for each independent variable.  


```{r}
#| include: false
#| warning: false
#| message: false

odds_ratios <- exp(coef_unscaled)
odds_ratios

#The standard errors of the estimated coefficients is below each respective intercept.
```

## Model 2: Year 2023

```{r}
#| include: false
#| warning: false
#| message: false


#model for blue side 2023
set.seed(853)

blue_data_2023 <- blue_data %>% filter(year == 2023)

blue_summary_data_2023 <- 
  blue_data_2023 |> 
  slice_sample(n = 1000)

blue_results_2023 <-
  stan_glm(
    result ~ golddiffat10 + xpdiffat10 + csdiffat10 + golddiffat15 + xpdiffat15 + csdiffat15,
    data = blue_summary_data_2023,
    family = binomial(link = "logit"),
    prior = normal(location = 0, scale = 2.5, autoscale = TRUE),
    prior_intercept = 
      normal(location = 0, scale = 2.5, autoscale = TRUE),
    seed = 853)

saveRDS(
  blue_results_2023,
  file = "blue_results_2023.rds")

blue_results_2023 <-
  readRDS(file = "blue_results_2023.rds")
```
 
```{r, fig.width= 6, fig.height= 3}
#| echo: false
#| warning: false
#| message: false
#| label: fig-headdata4
#| fig-cap: "Logistic regression model of Worlds matches from 2023 for difference gold, xp and cs at 10 and 15 minutes relative to win rate"


modelplot(blue_results_2023, conf_level = 0.9) +
  labs(x = "90 per cent credibility interval")
```
@fig-headdata3 displays the logistic regression model of Worlds matches from 2023 for average team difference in gold, experience and creep score at 10 and 15 minutes relative to win rate. Quite similar to Model 1 in @fig-headdata3, the same variables are correlated with a higher probability of winning, expect for 'csdiffat10', which is instead positively correlated with a higher win probability. Observe that the values vary more for all variables, as we are considering a smaller data set compared to Model 1. 

```{r}
#| echo: false
#| warning: false
#| message: false
#| label: tbl-headdata8
#| tbl-cap: "Model summary of Model 2"


modelsummary(
  list(
    "Probability of winning " = blue_results_2023
  ),
  gof_omit = ".*"
  )

```

@tbl-headdata8 shows the coefficients of the predictor variables in Model 2. The top half of the table provides the values of the same coefficients as @tbl-headdata7, but considering data only from 2023. 

# Discussion

## Model Analysis

As early game statistics can determine the rest of the game, it is important to consider these early game variables. Considering the correlation of a negative difference in experience and creep score to a higher likelihood of winning, this could suggest that game mechanics are more forgiving towards mistakes during the first 10 minutes of the game. This could also suggest that teams with “scaling” champions, ones that are weaker in the early game due to lack of items and experience, encounter “spikes” in power after the first 10 minutes. These spikes are attributed to becoming stronger due to unlocked abilities, or purchased items that can amplify a champion’s power. Another possibility for these negative differences can be from the losing team acquiring “bounties.” If a team is ahead early in the game, individual champions will likely be assigned a bounty from securing kills - and it will be rewarded to whichever enemy “shuts down” the champion with the bounty. If this is the case, most teams will target the player with the bounty, and attempt to “feed” it to a specific player on their team in order to assist them with gaining gold and experience. This specific player is normally the “carry” of the team, which can benefit the most from a higher income by dealing more damage and/or being harder to kill. If a team’s carry is fed a bounty, they can begin to “snowball” through their power spike, in which they collect more kills and secure more objectives. For this reason, a team having a weaker start to a game suggests they have champions that grow much stronger as the game progresses, and thus benefit in the later stages. Additionally, a losing team can capitalize on the overconfidence or blunders of the winning team, and be awarded bounties that a carry can utilize to reverse the disadvantage.

Taking into consideration team statistics, if multiple players of one team secure kills in the early game, they will have a higher amount of gold relative to experience and creep score. According to @fig-headdata6, if a team has a higher gold count at 10 minutes but lower experience and creep score, we can assume that they have more kills at that stage. This suggests that team kills before 10 minutes is correlated to higher difference statistics for the variables at the 15 minute mark, and thus a higher likelihood of winning. 

Overall, there are many reasons to consider the negative difference in the two variables relative to the rest, and this could suggest that a weaker starter to a game can be more beneficial and increase the likelihood of winning. 

Taking into consideration the many factors that are calculated during a League of Legends match, and the variety in each game, it is hard to determine exact statistics based on professional players. However, this is a good generalization.


## Next Steps

Considering the many factors that lead to a win, as well as the individual gameplay of each player and their collaboration, it is hard to predict what exactly leads to win, even in the early stages of the game. However, it is important to analyze what raises the chances of winning as much as possible. 

Due to periodic updates that determine many factors in the game, it is hard to make current predictions for the Worlds Championship in 2024. For better analysis, instead of using past Worlds data, we can consider data from other tournaments played on the current update for teams qualified to play in the Worlds in late 2024, to base our model off of more recent and updated data. A next step worth considering would be to analyze the sources of gold for each team or individual player, and analyze how the sources are correlated to the likelihood of winning. 

\newpage

# Refrences
*intro*
leage stat for players in 2022 - https://prioridata.com/data/league-of-legends/#:~:text=It%20offers%20insights%20into%20the%20game's%20current%20popularity%20and%20player%20engagement.&text=League%20of%20Legends%20has%20a,152%20million%20as%20of%202023.

 stanley cup refrence - Hardenstein, Taylor Stanton (Spring 2017). ""Skins" in the Game: Counter-Strike, Esports, and the Shady World of Online Gambling".
 

